FROM ubuntu:jammy

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN set -eux; \
	groupadd --gid 999 --system mongodb; \
	useradd --uid 999 --system --gid mongodb --home-dir /data/db mongodb; \
	mkdir -p /data/db /data/configdb; \
	chown -R mongodb:mongodb /data/db /data/configdb

RUN set -eux; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		ca-certificates \
		jq \
		numactl \
	; \
	if ! command -v ps > /dev/null; then \
		apt-get install -y --no-install-recommends procps; \
	fi; \
	rm -rf /var/lib/apt/lists/*

# grab gosu for easy step-down from root (https://github.com/tianon/gosu/releases)
ENV GOSU_VERSION 1.12
# grab "js-yaml" for parsing mongod's YAML config files (https://github.com/nodeca/js-yaml/releases)
ENV JSYAML_VERSION 3.13.1

RUN set -ex; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		wget curl libcurl4 \
	; \
	if ! command -v gpg > /dev/null; then \
		apt-get install -y --no-install-recommends gnupg dirmngr; \
		savedAptMark="$savedAptMark gnupg dirmngr"; \
	elif gpg --version | grep -q '^gpg (GnuPG) 1\.'; then \
# "This package provides support for HKPS keyservers." (GnuPG 1.x only)
		apt-get install -y --no-install-recommends gnupg-curl; \
	fi; \
	rm -rf /var/lib/apt/lists/*; \
	\
	dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
	wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
	wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
	gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
	command -v gpgconf && gpgconf --kill all || :; \
	rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc; \
	\
	wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js"; \
# TODO some sort of download verification here
	\
	apt-mark auto '.*' > /dev/null; \
	apt-mark manual $savedAptMark > /dev/null; \
    apt-mark manual wget curl libcurl4; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	\
# smoke test
	chmod +x /usr/local/bin/gosu; \
	gosu --version; \
	gosu nobody true

RUN mkdir /docker-entrypoint-initdb.d

RUN set -ex; \
	export GNUPGHOME="$(mktemp -d)"; \
	set -- '39BD841E4BE5FB195A65400E6A26B1AE64C3C388'; \
	for key; do \
		gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
	done; \
	mkdir -p /etc/apt/keyrings; \
	gpg --batch --export "$@" > /etc/apt/keyrings/mongodb.gpg; \
	command -v gpgconf && gpgconf --kill all || :; \
	rm -r "$GNUPGHOME"

# https://docs.mongodb.org/master/release-notes/6.0/
ENV MONGO_VERSION r6.1.0-rc4
# 09/29/2022, https://github.com/mongodb/mongo/tree/94fb7dfc8b974f1f5343e7ea394d0d9deedba50e

RUN set -x; \
    wget -O /tmp/unofficial-mongodb.ce.pi.${MONGO_VERSION}.min.tar.gz https://github.com/themattman/mongodb-raspberrypi-binaries/releases/download/${MONGO_VERSION}-rpi-unofficial/mongodb.ce.pi.${MONGO_VERSION}.min.tar.gz \
        && tar xzvf /tmp/unofficial-mongodb.ce.pi.${MONGO_VERSION}.min.tar.gz -C /tmp \
        && mv /tmp/mongod.stripped /usr/local/bin/mongod \
        && mv /tmp/mongo.stripped /usr/local/bin/mongo \
        && mv /tmp/mongos.stripped /usr/local/bin/mongos \
        && rm /tmp/README.md \
        && rm /tmp/LICENSE-Community.txt
VOLUME /data/db /data/configdb

# ensure that if running as custom user that "mongosh" has a valid "HOME"
# https://github.com/docker-library/mongo/issues/524
ENV HOME /data/db

RUN wget https://repo.mongodb.org/apt/ubuntu/dists/focal/mongodb-org/5.0/multiverse/binary-arm64/mongodb-database-tools_100.7.3_arm64.deb && dpkg -i mongodb-database-tools_100.7.3_arm64.deb

RUN wget http://ports.ubuntu.com/pool/main/o/openssl/libssl1.1_1.1.1-1ubuntu2.1~18.04.23_arm64.deb && dpkg -i libssl1.1_1.1.1-1ubuntu2.1~18.04.23_arm64.deb

#### END OF MONGO CODE, START OF AVALON CODE
# Set debconf to run non-interactively
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Replace shell with bash so we can source files
RUN rm /bin/sh && ln -s /bin/bash /bin/sh

# Install base dependencies
RUN apt-get update && apt-get install -y -q --no-install-recommends \
        apt-transport-https \
        build-essential \
        ca-certificates \
        git \
        libssl-dev \
        wget \
	unzip \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get -y update && apt-get install -y openssl vim tmux locales-all curl

# Install nvm with node and npm
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && apt-get install -y nodejs

LABEL "project.home"="https://github.com/MrFasolo97/avalon"
RUN cd / && git clone https://github.com/MrFasolo97/avalon && cd /avalon && git checkout new_net

RUN mkdir /avalon/log
RUN mkdir /avalon/genesis
RUN mkdir /avalon/blocks
WORKDIR /avalon
RUN npm install
RUN npm install --save axios secp256k1 node-cron
RUN echo "" > log/avalon.log

VOLUME $HOME/avalon/logs /avalon/log
VOLUME $HOME/avalon/mongodb /data/db
VOLUME $HOME/avalon/blocks /avalon/blocks

ADD ./scripts/start_dtube.sh ./scripts/start_dtube.sh
ADD ./scripts/start_mainnet.sh ./scripts/start_mainnet.sh
ADD ./scripts/restartMining.mjs .
COPY .tmux.conf /root/.tmux.conf
COPY .vimrc /root/.vimrc

EXPOSE 6029
EXPOSE 3029


CMD ["sh"]
